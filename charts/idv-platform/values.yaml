# Default values for face-api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

images:
  portal:
    repository: regulaforensics/idv-portal
    tag: dev
    pullPolicy: Always
  coordinator:
    repository: regulaforensics/idv-coordinator
    tag: latest
    pullPolicy: Always
  identity:
    repository: regulaforensics/idv-identity
    tag: latest
    pullPolicy: Always
  proxy:
    repository: envoyproxy/envoy
    tag: v1.23.1
    pullPolicy: IfNotPresent
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

# Global node selector
# If set, this will apply to all milvus components
# Individual components can be set to a different node selector
nodeSelector: {}

# Global tolerations
# If set, this will apply to all milvus components
# Individual components can be set to a different tolerations
tolerations: []

# Global affinity
# If set, this will apply to all milvus components
# Individual components can be set to a different affinity
affinity: {}

# Global labels and annotations
# If set, this will apply to all milvus components
labels: {}
podAnnotations: {}


service:
  type: ClusterIP
  port: 80
  ## service annotations
  annotations: {}
  # Optionally assign a known public LB IP
  # loadBalancerIP: ~
  # LoadBalancerSourcesRange is a list of allowed CIDR values, which are combined with ServicePort to
  # set allowed inbound rules on the security group assigned to the master load balancer
  # loadBalancerSourceRanges:
  #   - "10.123.0.0/16"
  loadBalancerSourceRanges: []


ingress:
  # Enable ingress resource
  enabled: false
  # The Ingress Class for the web Ingress (used only with Kubernetes v1.19 and above)
  className: ""
  # Annotations for the web Ingress
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # The hostnames or hosts configuration for the web Ingress
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  # Enable TLS termination for the web Ingress
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


portal:
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  extraEnv: []


proxy:
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  extraEnv: []

  service:
    type: ClusterIP
    port: 80
    annotations: {}
    # Optionally assign a known public LB IP
    # loadBalancerIP: ~
    # LoadBalancerSourcesRange is a list of allowed CIDR values, which are combined with ServicePort to
    # set allowed inbound rules on the security group assigned to the master load balancer
    # loadBalancerSourceRanges:
    #   - "10.123.0.0/16"
    # loadBalancerSourceRanges: []

  configYaml:


coordinator:
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  extraEnv: []

  service:
    type: ClusterIP
    port: 8000
    annotations: {}
    # Optionally assign a known public LB IP
    # loadBalancerIP: ~
    # LoadBalancerSourcesRange is a list of allowed CIDR values, which are combined with ServicePort to
    # set allowed inbound rules on the security group assigned to the master load balancer
    # loadBalancerSourceRanges:
    #   - "10.123.0.0/16"
    # loadBalancerSourceRanges: []

  # Read external PostgreSQL configuration from a secret.
  # This should point at a secret file with a single key which specifyies the connection string.
  idvCoordinatorSecret: "idv-coordinator-db-secret"

identity:
  replicas: 1
  resources: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  extraEnv: []

  service:
    type: ClusterIP
    port: 80
    annotations: {}
    # Optionally assign a known public LB IP
    # loadBalancerIP: ~
    # LoadBalancerSourcesRange is a list of allowed CIDR values, which are combined with ServicePort to
    # set allowed inbound rules on the security group assigned to the master load balancer
    # loadBalancerSourceRanges:
    #   - "10.123.0.0/16"
    # loadBalancerSourceRanges: []

keycloakx:
  enabled: true
  command:
    - "/opt/keycloak/bin/kc.sh"
    - "--verbose"
    - "start"
    - "--auto-build"
    - "--http-enabled=true"
    - "--http-port=8080"
    - "--hostname-strict=false"
    - "--hostname-strict-https=false"
    - "--spi-events-listener-jboss-logging-success-level=info"
    - "--spi-events-listener-jboss-logging-error-level=warn"
  extraEnv: |
    - name: KEYCLOAK_ADMIN
      valueFrom:
        secretKeyRef:
          name: {{ include "keycloak.fullname" . }}-admin-creds
          key: user
    - name: KEYCLOAK_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          name: {{ include "keycloak.fullname" . }}-admin-creds
          key: password
    - name: JAVA_OPTS_APPEND
      value: >-
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=50.0
        -Djava.awt.headless=true
        -Djgroups.dns.query={{ include "keycloak.fullname" . }}-headless

  dbchecker:
    enabled: true

  database:
    vendor: postgres
    hostname: '{{ .Release.Name }}-postgresql'
    port: 5432
    username: dbusername
    password: dbpassword
    database: keycloak

  secrets:
    admin-creds:
      annotations:
        my-test-annotation: Test secret for {{ include "keycloak.fullname" . }}
      stringData:
        user: admin
        password: secret


env: []
# - name: ""
#   value: ""


# Mount additional volumes into face-api pod.
extraVolumes: []
extraVolumeMounts: []





livenessProbe:
  enabled: false
  initialDelaySeconds: 5
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

readinessProbe:
  enabled: false
  initialDelaySeconds: 5
  periodSeconds: 20
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5
