nameOverride: ""
fullnameOverride: ""

commonLabels: {}

deployment:
  forceUpdate: ""

versionSha: latest
image:
  repository: regulaforensics/idv-coordinator
  pullPolicy: Always
  tag: ""

imagePullSecrets: {}

# Supply the name of existing secret with the regula.license file.
# You can load it to a k8s generic secret via the following command:
# `kubectl create secret generic idv-license -n <namespace> --from-file=regula.license`
#
licenseSecretName: null

api:
  replicaCount: 1

  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources: {}
  topologySpreadConstraints: []

  service:
    type: ClusterIP
    port: 80
    annotations: {}
    loadBalancerSourceRanges: []

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # API pod disruption budget
  podDisruptionBudget:
    enabled: false
    # PDB configuration
    config:
      # minAvailable and maxUnavailable cannot be both set
      maxUnavailable: 1
      minAvailable: ~

  probes:
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    startupProbe:
      enabled: false
      initialDelaySeconds: 20
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3

scheduler:
  replicaCount: 1

  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources: {}
  topologySpreadConstraints: []

workflow:
  replicaCount: 1

  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources: {}
  topologySpreadConstraints: []

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # Workflow pod disruption budget
  podDisruptionBudget:
    enabled: false
    # PDB configuration
    config:
      # minAvailable and maxUnavailable cannot be both set
      maxUnavailable: 1
      minAvailable: ~

audit:
  replicaCount: 1

  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources: {}
  topologySpreadConstraints: []

indexer:
  replicaCount: 1

  nodeSelector: {}
  tolerations: []
  affinity: {}
  resources: {}
  topologySpreadConstraints: []

config:
  baseUrl: ""
  mode: cluster  # "standalone" or "cluster"
  fernetKey: ""
  identifier: null

  services:
    api:
      port: 8000
      host: 0.0.0.0
      workers: auto
      keepalive: 120
      timeout: 120
      auth:
        enabled: true
        jwt:
          secret: null
          jwkUrl: null
      cors:
        enabled: false
        origins: "*"
        methods: "POST,PUT,GET,DELETE,PATCH,HEAD"
        headers: "Content-Type,X-Client-Key"
        maxAge: 0

    indexer:
      timeout: 60

    audit:
      wsEnabled: true

    workflow:
      workers: auto

    scheduler:
      enabled: true
      jobs:
        expireSessions:
          cron: "*/10 * * * * *"
        reloadWorkflows:
          cron: "*/5 * * * * *"
        cleanSessions:
          cron: "*/30 * * * * *"
          keepFor: "1w"
        expireDeviceLogs:
          cron: "* */5 * * *"
          keepFor: "30d"
        reloadLocales:
          cron: "*/15 * * * * *"
        cronWorkflow:
          cron: "*/5 * * * *"

    docreader:
      enabled: false
      prefix: drapi
      url: ''

    faceapi:
      enabled: false
      prefix: faceapi
      url: ''

  logging:
    level: INFO
    formatter: "%(asctime)s.%(msecs)03d - %(name)s - %(levelname)s - %(message)s"
    console: true
    file: false
    path: /var/log
    maxFileSize: 10485760
    filesCount: 10

  metrics:
    statsd:
      enabled: false
      host: null
      port: 9125
      prefix: idv

  storage:
    type: fs
    s3:
      endpoint: ""
      accessKey: null
      accessSecret: null
      region: "eu-central-1"
      secure: true
    fs:
      path: "/var/idv/data"

    sessions:
      location:
        bucket: coordinator
        prefix: "sessions"
        folder: ""
    persons:
      location:
        bucket: coordinator
        prefix: "persons"
        folder: "person_files"
    workflows:
      location:
        bucket: coordinator
        prefix: "workflows"
        folder: ""
    userFiles:
      location:
        bucket: "coordinator"
        prefix: "files"
        folder: "user_files"
    locales:
      location:
        bucket: "coordinator"
        prefix: "localization"
        folder: "config"
    assets:
      location:
        bucket: "coordinator"
        prefix: "assets"
        folder: "assets"

  mongo:
    url: ""
    # Comment the line above and uncomment the line below to use MongoDB subchart
    # url: mongodb://mongodb:27017/idv

  topics:
    event:
      url: memory://
      # Comment the line above and uncomment the line below if valkey.enabled.true is set
      # url: "redis://:t3stPss@valkey-primary:6379"
      options: null
    audit:
      url: memory://
      # Comment the line above and uncomment the line below if valkey.enabled.true is set
      # url: "redis://:t3stPss@valkey-primary:6379"
      options: null
    client:
      url: memory://
      # Comment the line above and uncomment the line below if valkey.enabled.true is set
      # url: "redis://:t3stPss@valkey-primary:6379"
      options: null

  faceSearch:
    # Set opensearch.enabled.true if 'faceSearch' is enabled
    enabled: false
    limit: 1000
    threshold: 0.75
    database:
      type: opensearch
      opensearch:
        host: opensearch
        port: 9200
        useSsl: false
        verifyCerts: false
        username: admin
        password: ""
        dimension: 512
        indexName: hnsw
        awsAuth:
          enabled: false
          region: ""
          accessKey: ""
          secretKey: ""

  mobile: {}

  oauth2:
    enabled: false
    providers: []

  smtp:
    enabled: false
    host: ""
    port: 587
    tls: true
    username: ""
    password: ""

  textSearch:
    enabled: true
    limit: 1000
    analyzers:
      - "english"
      - "russian"
    database:
      type: atlas

serviceAccount:
  create: true
  annotations: {}
  name: ""

env:
  - name: IDV_COORDINATOR_CONFIG_PATH
    value: /etc/idv/idv-config.yaml
  # The 'idv' secret has to be preinstalled in the same namespace as the IDV Coordinator.
  # Uncomment the following lines to use secrets for sensitive configuration values.
  # - name: IDV_CONFIG__MONGO__URL
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: IDV_CONFIG__MONGO__URL
  # - name: IDV_CONFIG__OAUTH2__PROVIDERS__0__SECRET
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: IDV_CONFIG__OAUTH2__PROVIDERS__0__SECRET
  # - name: IDV_CONFIG__OAUTH2__PROVIDERS__1__SECRET
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: IDV_CONFIG__OAUTH2__PROVIDERS__1__SECRET
  # - name: IDV_CONFIG__OAUTH2__PROVIDERS__3__SECRET
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: IDV_CONFIG__OAUTH2__PROVIDERS__3__SECRET
  # - name: IDV_CONFIG__FERNETKEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: IDV_CONFIG__FERNETKEY
  # - name: IDV_CONFIG__TOPICS__EVENT__URL
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: IDV_CONFIG__TOPICS__EVENT__URL
  # - name: IDV_CONFIG__TOPICS__CLIENT__URL
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: IDV_CONFIG__TOPICS__CLIENT__URL
  # - name: IDV_CONFIG__TOPICS__AUDIT__URL
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: IDV_CONFIG__TOPICS__AUDIT__URL
  # - name: IDV_CONFIG__SMTP__PASSWORD
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: IDV_CONFIG__SMTP__PASSWORD
  # - name: IDV_CONFIG__SMTP__USERNAME
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: IDV_CONFIG__SMTP__USERNAME
  # - name: AWS_ACCESS_KEY_ID
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: AWS_ACCESS_KEY_ID
  # - name: AWS_SECRET_ACCESS_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: idv
  #       key: AWS_SECRET_ACCESS_KEY

ingress:
  enabled: false
  # The Ingress Class for the web Ingress (used only with Kubernetes v1.19 and above)
  # className: ""

  annotations: {}

  # The hostnames or hosts configuration for the web Ingress
  hosts: []
    # - idv.domain.com
  paths: []
    # - /
  pathType: Prefix

  # TLS configuration for the IDV Ingress
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

podAnnotations: {}

podSecurityContext: {}

securityContext: {}


###################################
# Subcharts
###################################

## prometheus-statsd-exporter
statsd:
  enabled: false
  statsd:
    mappingConfig: |-
      mappings:
      - match: "idv.(.*)_http_method_(.*)_route_(.*)_status_(.*)_duration"
        name: "idv_${1}_http_duration"
        match_type: regex
        labels:
          service: "$1"
          method: "$2"
          url_rule: "$3"
          status: "$4"
      - match: "idv.(.*)_http_status_(.*)_total"
        name: "idv_${1}_http_request_total"
        match_type: regex
        labels:
          service: "$1"
          status: "$2"
      - match: "idv.(.*)_(.*)_duration"
        name: "idv_${1}_duration"
        match_type: regex
        labels:
          service: "$1"
          operation: "$2"
      - match: "idv.(.*)_(.*)_(.*)_condition_eval_count"
        name: "idv_workflow_step_condition_eval_count"
        match_type: regex
        labels:
          workflow_id: "$1"
          condition: "$2"
          result: "$3"
      - match: "idv.(.*)_(.*)_error_count"
        name: "idv_error"
        match_type: regex
        labels:
          service: "$1"
          operation: "$2"
      - match: "idv.(.*)_(.*)_success_count"
        name: "idv_${1}_success_count"
        match_type: regex
        labels:
          service: "$1"
          operation: "$2"
      - match: "idv.(.*)_(.*)_error_count"
        name: "idv_${1}_error_count"
        match_type: regex
        labels:
          service: "$1"
          operation: "$2"
      - match: "idv.(.*)_(.*)_count"
        name: "idv_${1}_total"
        match_type: regex
        labels:
          service: "$1"
          operation: "$2"

# NOTE
# The subcharts below are used for the demonstration and Dev/Test purposes.
# We strongly recommend to deploy separate installations of the DB in Production.

mongodb:
  enabled: false
  fullnameOverride: mongodb
  architecture: standalone
  auth:
    enabled: false

valkey:
  enabled: false
  fullnameOverride: valkey
  replicaCount: 1
  architecture: standalone
  auth:
    enabled: true
    password: "t3stPss"
  master:
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 500m
        memory: 512Mi
    persistence:
      enabled: false
  service:
    type: ClusterIP
    port: 6379

opensearch:
  enabled: false
  fullnameOverride: opensearch
  opensearchPassword: ""
  replicas: 1
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
  securityConfig:
    enabled: true
  nodeGroup: single-node
  singleNode: true
  config:
    opensearch.yml: |
      discovery.type: single-node
      plugins.security.disabled: true
      bootstrap.memory_lock: true
  extraEnvs:
    - name: OPENSEARCH_JAVA_OPTS
      value: "-Xms128m -Xmx512m"
