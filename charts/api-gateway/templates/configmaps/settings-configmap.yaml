apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "settings" . }}
data:
  settings.py: |
    import os

    from pathlib import Path

    BASE_DIR = Path(__file__).resolve().parent.parent
    print("BASE DIR :: ", BASE_DIR)

    TEMPLATES_DIR = Path(BASE_DIR, "views")
    print("TEMPLATES :: ", TEMPLATES_DIR)

    SECRET_KEY = 'django-insecure-wx(s(m$3-n5)@ciqgo*ar%k3u-%jv#(2p=g9)d1cy@o@6u+a&='

    DEBUG = True

    ALLOWED_HOSTS = ['api-gateway', '*']

    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'drf_yasg',
        'rest_framework',
        'rest_framework.authtoken',
        'rest_auth',
        'rest_framework_swagger',
        'trainmodels'
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'gateway.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [TEMPLATES_DIR],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
                'libraries': {
                    'staticfiles': 'django.templatetags.static',
                }
            },
        },
    ]

    WSGI_APPLICATION = 'gateway.wsgi.application'

    DJANGO_DB_HOST = os.getenv("DJANGO_DB_HOST", default="127.0.0.1")
    DJANGO_SETTINGS_MODULE = 'gateway.settings'

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
        {{- if .Values.custom_db.enabled }}}
            'NAME': '{{ .Values.custom_db.database }}',
            'USER': '{{ .Values.custom_db.username }}',
            'PASSWORD': '{{ .Values.custom_db.password }}',
            'HOST': '{{ .Values.custom_db.host }}',
        {{- else }}
            'NAME': '{{ index .Values "postgresql-ha" "global" "postgresql" "database" }}',
            'USER': '{{ index .Values "postgresql-ha" "global" "postgresql" "username" }}',
            'PASSWORD': '{{ index .Values "postgresql-ha" "global" "postgresql" "password" }}',
            'HOST': '{{ include "gateway.postgresql" . }}',
        {{- end }}
            'PORT': '5432',
            'AUTOCOMMIT': True,
            'CONN_MAX_AGE': 0,
            'ATOMIC_REQUESTS': False,
            'OPTIONS': {},
        }
    }

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.BasicAuthentication',
            'rest_framework.authentication.SessionAuthentication',
        ]
    }

    LANGUAGE_CODE = 'en-us'
    TIME_ZONE = 'UTC'

    SETTINGS_DIR = os.path.dirname(__file__)

    import datetime
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'file': {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'filename': f'/mnt/facestore/face_data_store/api_logs/api_logs_{datetime.datetime.now().strftime("%m_%d_%Y_%H_%M_%S")}.log',
                "formatter": "verbose",
            },
        },
        'loggers': {
            'api.views': {
                'handlers': ['file'],
                'level': 'INFO',
                'propagate': True,
            },
            'tagging.tagger.views': {
                'handlers': ['file'],
                'level': 'INFO',
                'propagate': True,
            },
            'tagging.tagger_video.views': {
                'handlers': ['file'],
                'level': 'INFO',
                'propagate': True,
            },
            'samples.views': {
                'handlers': ['file'],
                'level': 'INFO',
                'propagate': True,
            }
        },
        "formatters": {
            "verbose": {
                "format": "[{levelname}] {message}",
                "style": "{",
            }
        },
    }

    try:
        from gateway.env_settings import *
        print(f'The env_settings.py file is found.')
    except Exception as e:
        print(f'The env_settings.py file is not found. {e}')