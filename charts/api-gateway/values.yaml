gateway:
  replicas: 1
  image:
    repository: regulaforensics/gateway
    tag: ~
    pullPolicy: Always
  imagePullSecrets: []

  resources: {}

  podAnnotations: {}
  podSecurityContext:
    fsGroup: 0

  nameOverride: ""
  fullnameOverride: ""

  securityContext: {}

  nodeSelector: {}
  tolerations: []
  affinity: {}

  config:
    runtime: PROD
    apiToken: ~
    apiTokenSecret: ~
    secretKey: ~
    secretKeySecret: ~
    debug: False
    logsBasePath: /app/logs
    allowedHosts: "*"

    database:
      gateway:
        host: localhost
        port: 5432
        database: gateway
        user: gateway
        password: gateway
        gatewaySecret: ~
      tagger:
        host: localhost
        port: 6432
        database: tagger
        user: tagger
        password: tagger
        taggerSecret: ~

    integration:
      airflow:
        user: airflow
        password: airflow
        airflowSecret: ~

  env: []

  extraVolumes: []
  extraVolumeMounts: []

  service:
    type: ClusterIP
    port: 8000
    ## service annotations
    annotations: {}
    # Optionally assign a known public LB IP
    loadBalancerIP: ~
    # LoadBalancerSourcesRange is a list of allowed CIDR values, which are combined with ServicePort to
    # set allowed inbound rules on the security group assigned to the master load balancer
    # loadBalancerSourceRanges:
    #   - "10.123.0.0/16"
    loadBalancerSourceRanges: []

  ingress:
    enabled: false
    className: ""
    annotations: {}
    # The hostnames or hosts configuration for the web Ingress
    hosts: []
      # - api-gateway.domain.com
    paths: []
      # - path: /
    pathType: Prefix

    # TLS configuration for the Gateway Ingress
    tls: []
    #  - secretName: api-gateway-tls
    #    hosts:
    #      - api-gateway.local

  serviceMonitor:
    # Set this to `true` to create ServiceMonitor for Prometheus operator
    enabled: false
    namespace: ~
    interval: "30s"
    scrapeTimeout: "10s"
    # Additional labels that can be used so ServiceMonitor will be discovered by Prometheus
    additionalLabels: {}

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: ~

celery:
  replicas: 1

  resources: {}

  podSecurityContext:
    fsGroup: 0

  nameOverride: ""
  fullnameOverride: ""

  securityContext: {}

  nodeSelector: {}
  tolerations: []
  affinity: {}

  config:
    brokerUrl: ~
    resultBackend: ~

  env: []

  extraVolumes: []
  extraVolumeMounts: []

flower:
  replicas: 1

  resources: {}

  podSecurityContext:
    fsGroup: 0

  nameOverride: ""
  fullnameOverride: ""

  securityContext: {}

  nodeSelector: {}
  tolerations: []
  affinity: {}

  config:
    unauthenticatedApi: true

  env: []

  extraVolumes: []
  extraVolumeMounts: []

  service:
    type: ClusterIP
    port: 5555
    annotations: {}
    loadBalancerIP: ~
    loadBalancerSourceRanges: []

  ingress:
    enabled: false
    # className: ""
    annotations: {}
    # The hostnames or hosts configuration for the web Ingress
    hosts: []
      # - api-gateway-flower.domain.com
    paths: []
      # - path: /
    pathType: Prefix

    # TLS configuration for the Flower Ingress
    tls: []
    #  - secretName: api-gateway-flowe-tls
    #    hosts:
    #      - api-gateway-flower.local


## Subcharts
# Configuration for redis subchart
redis:
  enabled: true


# Configuration for postgresql-ha subchart
postgresql:
  enabled: true
  global:
    postgresql:
      username: "regula"
      password: "regulapasswd"
      database: "regula_db"
      repmgrUsername: "regularepmgr"
      repmgrPassword: "regularepmgrpasswd"
    pgpool:
      adminUsername: "regulapgpool"
      adminPassword: "regulapgpoolpasswd"
